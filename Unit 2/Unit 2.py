import numpy as np
import matplotlib.pyplot as plt

def task1a(m, n):
    """
    This function takes in two integers m and n and returns three arrays:
    1. An array of zeros of shape (m,)
    2. An array of integers from 1 to n
    3. A 2D array (m, n) of random numbers sampled from a uniform distribution between 0 and 1
    """
    # Define the first array
    zeros_array = np.zeros(m)
    # Define the second array
    sequence_array = np.arange(1, n + 1)
    # Define the third array
    random_array = np.random.rand(m, n)

    # return the first array and the second array
    return zeros_array, sequence_array, random_array

def task1c(m, n):
    """
    This function takes in two integers m and n and returns the mean of the second array and the maximum value of the third array.
    """
    zeros_array, sequence_array, random_array = task1a(m, n)
    mean_value = np.mean(sequence_array)
    max_value = np.max(random_array)
    return mean_value, max_value

def task1d(a):
    """
    This function takes a numpy array a and modifies all its values to be the square of their original values.
    """
    a[:] = np.square(a)

#Mutable objects can be modified in place, while immutable objects cannot. 

def task2a(a, b, t):
    """
    This function takes in two vectors a and b and a scalar  t and returns the result of the following operation:
    """
    result = 2 * t * (a + b)
    return result

def task2b(x, y):
    """
    This function takes in two 3D position vectors x and y and returns the distance between the positions.
    """
    distance = np.linalg.norm(x - y)
    return distance

def task3a(A, B):
    """
    This function takes in vectors A and B and returns the result of the cross product between A and B.
    """
    return np.cross(A, B), np.cross(B, A)

def task3b(A, B, C):
    """
    This function takes in vectors A, B and C and returns the result of the following operation:
    """
    return np.cross(A, B + C), np.cross(A, B) + np.cross(A, C)

def task3c(A, B, C):
    """
    This function takes in vectors A, B and C and returns the result of the following operation:
    """
    return np.cross(A, np.cross(B, C)), np.dot(A, C)*B - np.dot(A, B)*C

def task4a(n):
    """
    This function takes an integer n and creates a square 2D array M of shape n√ón,
    with elements filled in such that M[i][j] = i + 2 * j where i and j start from zero.
    """
    M = np.zeros((n, n), dtype=int)
    for i in range(n):
        for j in range(n):
            M[i][j] = i + 2 * j
    return M
 
def task4b(n):
    """
    This function takes an integer n and computes a 1D arrayy where y[i] = sum(M[i][j] for j in range(n)),
    using the matrix M generated by task4a.
    """
    M = task4a(n)
    y = np.sum(M, axis=0)
    return y

def task5(d, mu, sigma):
    """
    This function computes the Gaussian log-likelihood from three vectors d, mu, and sigma.
    logL = 1/2 * sum((d[i] - mu[i]) / sigma[i])^2
    """
    logL = 0.5 * np.sum(((d - mu) / sigma) ** 2)
    return logL


def task6(file_path):
    """
    This function performs basic data analysis on the data from the given file.
    It computes and displays the mean, median, standard deviation, minimum, and maximum
    for each column in the data.
    """
        # Read the data from the file, removing the '#' from the first line
    with open(file_path, 'r') as file:
        lines = file.readlines()
        # Remove the '#' from the first line
        if lines[0].startswith('#'):
            lines[0] = lines[0][1:].strip() + '\n'

    # Convert the lines to a numpy array
    data = np.genfromtxt(lines, delimiter=' ', names=True)

    # Compute basic statistics for each column
    means = []
    medians = []
    std_devs = []
    minimums = []
    maximums = []

    for column in data.dtype.names:
        means.append(np.mean(data[column]))
        medians.append(np.median(data[column]))
        std_devs.append(np.std(data[column]))
        minimums.append(np.min(data[column]))
        maximums.append(np.max(data[column]))

    
    # Display the results
    print("Basic Data Analysis:")
    print(f"Mean: {means}")
    print(f"Standard Deviation: {std_devs}")

    # Plot histograms for individual data points
    for column in data.dtype.names:
        plt.figure()
        plt.hist(data[column])
        plt.title(f'Histogram of {column}')
        plt.xlabel(column)
        plt.ylabel('Frequency')
        plt.show()

    # Plot scatter plots for pairs of data points
    columns = data.dtype.names
    for i in range(len(columns)):
        for j in range(i + 1, len(columns)):
            plt.figure()
            plt.scatter(data[columns[i]], data[columns[j]])
            plt.title(f'Scatter Plot of {columns[i]} vs {columns[j]}')
            plt.xlabel(columns[i])
            plt.ylabel(columns[j])
            plt.show()
    
    """
    # Optionally, save the results to a file
    with open("data_analysis_results.txt", "w") as f:
        f.write("Basic Data Analysis:\n")
        f.write(f"Mean: {mean}\n")
        f.write(f"Median: {median}\n")
        f.write(f"Standard Deviation: {std_dev}\n")
        f.write(f"Minimum: {minimum}\n")
        f.write(f"Maximum: {maximum}\n")
    """

# Example usage
file_path = '/Users/sangwonkang/Library/Mobile Documents/com~apple~CloudDocs/Documents/UK/UOE/Year 3/Computer Modelling/Unit 2/data.txt'  # Replace with your actual file path
task6(file_path)

def main():
    # Example data for task1, task2, task3
    A = np.array([1, 2, 3])  #Changes will be made when task1d is called (mutable)
    AA = np.array([1, 2, 3]) #So, I made a new array to keep the original array
    B = np.array([4, 5, 6])
    C = np.array([7, 8, 9])
    t = 2

    # Demonstrate task1a
    zeros_array, sequence_array, random_array = task1a(3, 5)
    print("task1a results:")
    print("Zeros array:", zeros_array)
    print("Sequence array:", sequence_array)
    print("Random array:", random_array)

    # Demonstrate task1c
    mean_value, max_value = task1c(3, 5)
    print("task1c results:")
    print("Mean of sequence array:", mean_value)
    print("Max of random array:", max_value)

    # Demonstrate task1d
    print("Original array:", A)
    task1d(A)
    print("Modified array (squared):", A)

    # Demonstrate task2a
    result2a = task2a(AA, B, t)
    print("task2a result:", result2a)
    
    # Demonstrate task2b
    distance = task2b(AA, B)
    print("task2b result (distance)): ", distance)

    # Demonstrate task3a
    result1, result2 = task3a(AA, B)
    print("task3a results:", result1, result2)
    
    # Demonstrate task3b
    result1, result2 = task3b(AA, B, C)
    print("task3b results:", result1, result2)
    
    # Demonstrate task3c
    result1, result2 = task3c(AA, B, C)
    print("task3c results:", result1, result2)

    # Demonstrate task4a
    M = task4a(5)
    print("task4a results:", M)

    # Demonstrate task4b
    y = task4b(5)
    print("task4b results:", y)
    
    # Example data for task5
    d = np.array([2.0, 3.0, 4.0])
    mu = np.array([2.5, 3.5, 4.5])
    sigma = np.array([0.5, 0.5, 0.5])
    
    # Demonstrate task5
    log_likelihood = task5(d, mu, sigma)
    print("task5 result (Gaussian log-likelihood):", log_likelihood)

# Ensure the main function runs only when the file is executed directly
if __name__ == "__main__":
    main()
